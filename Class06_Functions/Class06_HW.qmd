---
title: "Class06_HW"
author: "Krysten Jones (A10553682)"
format: pdf
---
First thing is to install the package we'll be using. In this case it's "bio3d"
use the following command `install.packages("bio3d")`

Then we'll want to call it from our library
```{r}
library(bio3d)
```

# Section 1: Improving analysis code by writing functions
## Section 1A. Improve this regular R code by abstracting the main activities in your own new function. The main steps should entail running through the code to see if it works, simplifying to a core working code snippet, reducing any calculation duplication, and finally transferring your new streamlined code into a more useful function for you.

Original

```{r}
# (A. Can you improve this analysis code?
df <- data.frame(a=1:10, b=seq(200,400,length=10),c=11:20,d=NA)

df$a <- (df$a - min(df$a))/(max(df$a) - min(df$a))
df$b <- (df$b - min(df$a))/(max(df$b) - min(df$b))
df$c <- (df$c - min(df$c))/(max(df$c) - min(df$c))
df$d <- (df$d - min(df$d))/(max(df$a) - min(df$d))
df$a

```

Let's start by examining our dataframe
```{r}
df <- data.frame(a=1:10, b=seq(200,400,length=10),c=11:20,d=NA)
df
```

Strange, it just looks like random numbers. That's ok lets see if we can condense. First, we have already been given the body of our function, instead
```{r}
A_ans <- function(x){x - min(x)/(max(x)-min(x))} 
apply(df, 2, A_ans)
```

## Section 1B:
Run through the code to see if it works, fix any copy/paste errors before simplifying to a core working code snippet, reducing any calculation duplication, and finally transferring it into a more useful function for you.

Original Code:
```{r}
# Can you improve this analysis code?
library(bio3d)
s1 <- read.pdb("4AKE") # kinase with drug
s2 <- read.pdb("1AKE") # kinase no drug
s3 <- read.pdb("1E4Y") # kinase with drug

s1.chainA <- trim.pdb(s1, chain="A", elety="CA")
s2.chainA <- trim.pdb(s2, chain="A", elety="CA")
s3.chainA <- trim.pdb(s1, chain="A", elety="CA")

s1.b <- s1.chainA$atom$b
s2.b <- s2.chainA$atom$b
s3.b <- s3.chainA$atom$b

plotb3(s1.b, sse=s1.chainA, typ="l", ylab="Bfactor")
plotb3(s2.b, sse=s2.chainA, typ="l", ylab="Bfactor")
plotb3(s3.b, sse=s3.chainA, typ="l", ylab="Bfactor")
```

## Q6. How would you generalize the original code above to work with any set of input
protein structures?

```{r}
library(bio3d)

Bfunc <- function(x) {
  ChainA <- trim.pdb(read.pdb(x), chain="A", elety="CA")
  plotb3(ChainA$atom$b, sse=ChainA, typ="l", ylab="Bfactor")
}

Bfunc("4AKE")
Bfunc("1AKE")
Bfunc("1E4Y")
```










